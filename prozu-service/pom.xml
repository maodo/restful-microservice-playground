<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>de.philipphauer</groupId>
	<artifactId>prozu-service</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<dropwizard.version>0.8.0</dropwizard.version>
		<java.version>1.8</java.version>
		<querydsl.version>3.6.3</querydsl.version>
		<mongodb.driver.version>2.13.1</mongodb.driver.version>
		<swagger-maven-plugin-version>3.0.1</swagger-maven-plugin-version>
		<prozu.port>8080</prozu.port>
		<prozu.port.admin>8081</prozu.port.admin>
		<mongodb.port>27017</mongodb.port>
		<docker.username>phauer</docker.username>
	</properties>
	<profiles>
		<profile>
			<id>docker-host-on-windows</id>
			<activation>
				<os>
					<family>Windows</family>
				</os>
			</activation>
			<properties>
				<docker.host.address>192.168.99.100</docker.host.address><!-- keep in 
					sync with DOCKER_HOST -->
			</properties>
		</profile>
		<profile>
			<id>docker-host-on-linux</id>
			<activation>
				<os>
					<family>Linux</family>
				</os>
			</activation>
			<properties>
				<docker.host.address>localhost</docker.host.address>
			</properties>
		</profile>
	</profiles>
	<dependencies>
		<dependency>
			<groupId>io.dropwizard</groupId>
			<artifactId>dropwizard-core</artifactId>
			<version>${dropwizard.version}</version>
		</dependency>
		<dependency>
			<groupId>io.dropwizard</groupId>
			<artifactId>dropwizard-testing</artifactId>
			<version>${dropwizard.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.dropwizard</groupId>
			<artifactId>dropwizard-client</artifactId>
			<version>${dropwizard.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.hubspot.dropwizard</groupId>
			<artifactId>dropwizard-guice</artifactId>
			<version>0.8.0</version>
		</dependency>
		<!-- mongodb: driver & ODM -->
		<dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>mongo-java-driver</artifactId>
			<version>${mongodb.driver.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>bson</artifactId>
			<version>${mongodb.driver.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mongojack</groupId>
			<artifactId>mongojack</artifactId>
			<version>2.3.0</version>
		</dependency>
		<dependency>
			<groupId>com.mysema.querydsl</groupId>
			<artifactId>querydsl-mongodb</artifactId>
			<version>${querydsl.version}</version>
		</dependency>
		<dependency>
			<groupId>com.mysema.querydsl</groupId>
			<artifactId>querydsl-apt</artifactId>
			<version>${querydsl.version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.mongodb.morphia</groupId>
			<artifactId>morphia</artifactId>
			<version>0.111</version>
		</dependency>
		<!-- revolve conflict between jackson 2.5.1 (used by dropwizard) and 2.4.4 
			(used by mongodb) -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.5.1</version>
		</dependency>
		<!-- i like this json api more -->
		<dependency>
			<groupId>org.glassfish</groupId>
			<artifactId>javax.json</artifactId>
			<version>1.0.4</version>
		</dependency>
		<!-- generating swagger specification from jax-rs annotations. access via 
			http://localhost:<your_port>/swagger -->
		<dependency>
			<groupId>io.federecio</groupId>
			<artifactId>dropwizard-swagger</artifactId>
			<version>0.7.0</version>
		</dependency>
		<!-- testing the swagger generated client library (generated from swagger.json; 
			which in turn is generated from this JAX-RS resource classes) causing version 
			conflict because generated lib uses very old jersey version :-( -->
		<!-- dependency> <groupId>de.philipphauer</groupId> <artifactId>prozu-service-client-library</artifactId> 
			<version>0.0.1</version> <scope>test</scope> </dependency -->
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>1.6</version>
				<configuration>
					<createDependencyReducedPom>true</createDependencyReducedPom>
					<filters>
						<filter>
							<artifact>*:*</artifact>
							<excludes>
								<exclude>META-INF/*.SF</exclude>
								<exclude>META-INF/*.DSA</exclude>
								<exclude>META-INF/*.RSA</exclude>
							</excludes>
						</filter>
					</filters>
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<transformer
									implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
								<transformer
									implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>de.philipphauer.prozu.ProZuApplication</mainClass>
								</transformer>
							</transformers>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
						</manifest>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.3</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.mysema.maven</groupId>
				<artifactId>apt-maven-plugin</artifactId>
				<version>1.1.3</version>
				<executions>
					<execution>
						<goals>
							<goal>process</goal>
						</goals>
						<configuration>
							<outputDirectory>target/generated-sources/java</outputDirectory>
							<processor>com.mysema.query.apt.morphia.MorphiaAnnotationProcessor</processor>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>com.github.kongchen</groupId>
				<artifactId>swagger-maven-plugin</artifactId>
				<version>${swagger-maven-plugin-version}</version>
				<configuration>
					<apiSources>
						<apiSource>
							<locations>de.philipphauer.prozu.rest</locations>
							<info>
								<title>Restful API of the ProZu Service</title>
								<version>v1</version>
							</info>
							<templatePath>${basedir}/src/test/resources/swagger-doc-template/strapdown.html.hbs</templatePath>
							<outputPath>${basedir}/target/swagger/document.html</outputPath>
							<swaggerDirectory>${basedir}/target/swagger/swagger-ui</swaggerDirectory>
						</apiSource>
					</apiSources>
				</configuration>
				<executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.jolokia</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.13.3</version>

				<configuration>
					<!-- don't specify dockerHost because this can be OS specific (linux 
						vs windows/boot2docker). use DOCKER_HOST instead. -->
					<images>
						<image>
							<alias>${project.artifactId}</alias>
							<name>${docker.username}/prozu-service:${project.version}</name>
							<build>
								<from>java:8-jre</from>
								<maintainer>${docker.username}</maintainer>
								<assembly>
									<descriptor>docker-assembly.xml</descriptor>
								</assembly>
								<ports>
									<port>8080</port>
									<port>8081</port>
								</ports>
								<cmd>
									<shell>java -DdbHost=$DB_PORT_27017_TCP_ADDR \
										-DdbPort=$DB_PORT_27017_TCP_PORT -jar \
										/maven/${project.build.finalName}.jar server \
										/maven/docker-config.yml</shell>
								</cmd>
							</build>
							<run>
								<namingStrategy>alias</namingStrategy>
								<ports>
									<port>${prozu.port}:8080</port>
									<port>${prozu.port.admin}:8081</port>
								</ports>
								<volumes>
									<bind>
										<volume>${user.home}/logs:/logs</volume>
									</bind>
								</volumes>
								<wait>
									<url>http://${docker.host.address}:${prozu.port.admin}/ping</url>
									<time>10000</time>
								</wait>
								<links>
									<link>mongodb:db</link>
								</links>
								<log>
									<prefix>${project.artifactId}</prefix>
									<color>cyan</color>
								</log>
							</run>
						</image>
						<image>
							<alias>mongodb</alias>
							<name>mongo:2.6.11</name>
							<run>
								<namingStrategy>alias</namingStrategy>
								<cmd>--smallfiles</cmd><!-- this is necessary on my native docker 
									installation on ubuntu. "ERROR: Insufficient free space for journal files" -->
								<!-- don't expose mongodb's port on the host. the host address and 
									port are exchanged via docker links between the containers. -->
								<!-- ports> <port>${mongodb.port}:27017</port> </ports -->
								<wait>
									<log>waiting for connections on port</log>
									<time>10000</time>
								</wait>
								<log>
									<prefix>MongoDB</prefix>
									<color>yellow</color>
								</log>
							</run>
						</image>
					</images>
				</configuration>
				<executions>
					<execution>
						<id>start</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>build</goal>
							<goal>start</goal>
						</goals>
					</execution>
					<execution>
						<id>stop</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
					<execution>
						<id>push-to-docker-hub</id>
						<phase>deploy</phase>
						<goals>
							<goal>push</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.18.1</version>
				<configuration>
					<phase>integration-test</phase>
					<includes>
						<include>**/*.java</include>
					</includes>
					<groups>de.philipphauer.prozu.di.IntegrationTest</groups>
					<systemPropertyVariables>
						<service.url>http://${docker.host.address}:${prozu.port}/</service.url>
					</systemPropertyVariables>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.18.1</version>
				<configuration>
					<excludedGroups>de.philipphauer.prozu.di.IntegrationTest</excludedGroups>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<version>2.7</version>
				<configuration>
					<skip>true</skip><!-- we push the container instead -->
				</configuration>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>com.github.kongchen</groupId>
										<artifactId>swagger-maven-plugin</artifactId>
										<versionRange>${swagger-maven-plugin-version}</versionRange>
										<goals>
											<goal>generate</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<execute></execute>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>
